#include <bits/stdc++.h>
using namespace std;

pair<int,int> FIFOReplacement(int pg[],int n,int capacity)
{
    unordered_set<int> s;
    queue<int> q;
    int pageFaults{};

    for(int i{};i<n;i++)
    {
        if(s.size()<capacity)
        {
            if(s.find(pg[i])==s.end())
            {
                s.insert(pg[i]);
                q.push(pg[i]);
                pageFaults++;
            }
        }
        else
        {
            if(s.find(pg[i])==s.end())
            {
                int val = q.front();
                q.pop();
                s.erase(val);
                s.insert(pg[i]);
                q.push(pg[i]);
                pageFaults++;
            }
        }
    }
    return pair<int,int>{pageFaults,n-pageFaults};
}

pair<int,int> LRUReplacement(int pg[],int n,int capacity)
{
    unordered_set<int> s;
    unordered_map<int,int> indexes;
    int pageFaults{};

    for(int i{};i<n;i++)
    {
        if(s.size()<capacity)
        {
            if(s.find(pg[i])==s.end())
            {
                s.insert(pg[i]);
                pageFaults++;
            }
            indexes[pg[i]] = i;
        }
        else
        {
            if(s.find(pg[i])==s.end())
            {
                int lru=INT_MAX,val;
                for(auto it=s.begin();it!=s.end();it++)
                {
                    if(indexes[*it]<lru)
                    {
                        lru = indexes[*it];
                        val = *it;
                    }
                }
                s.erase(val);
                s.insert(pg[i]);
                pageFaults++;
            }
            indexes[pg[i]] = i;
        }
    }
    return pair<int,int>{pageFaults,n-pageFaults};
}

bool search(vector<int> fr,int key)
{
    for(int i{};i<fr.size();i++)
    {
        if(fr[i]==key)
            return true;
    }
    return false;
}

int predict(int pg[],vector<int> fr,int n,int index)
{
    int res=-1,farthest = index;
    for(int i{};i<fr.size();i++)
    {
        int j;
        for(j=index;j<n;j++)
        {
            if(fr[i]==pg[j])
            {
                if(j>farthest)
                {
                    farthest = j;
                    res = i;
                }
                break;
            }
        }
        if (j==n)
            return i;
    }
    return (res==-1) ? 0:res;
}

pair<int,int> OptimalPageReplacement(int pg[],int n,int capacity)
{
    vector<int> fr;
    int pageHit{};
    for(int i{};i<n;i++)
    {
        if (search(fr,pg[i]))
        {
            pageHit++;
            continue;
        }

        if(fr.size()<capacity)
        {
            fr.push_back(pg[i]);
        }
        else
        {
            int j = predict(pg,fr,n,i+1);
            fr[j] = pg[i];
        }
    }
    return pair<int,int> {n-pageHit,pageHit};
}

// Driver code
int main()
{
    int pages[] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2};
    int n = sizeof(pages) / sizeof(pages[0]);
    int capacity = 4;
    pair<int, int> result = OptimalPageReplacement(pages, n, capacity);

    cout << "Page Faults: " << result.first << endl;
    cout << "Page Hits: " << result.second << endl;
    return 0;
}