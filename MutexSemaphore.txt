import java.util.LinkedList;
import java.util.Queue;
import java.util.concurrent.Semaphore;

class SharedResource {
    private Queue<Integer> buffer = new LinkedList<>();
    private static final int BUFFER_SIZE = 5;
    private Semaphore mutex = new Semaphore(1); // Mutex for controlling access to the buffer
    private Semaphore empty = new Semaphore(BUFFER_SIZE); // Semaphore to track empty slots in the buffer
    private Semaphore full = new Semaphore(0); // Semaphore to track filled slots in the buffer

    public void produce(int item) throws InterruptedException {
        empty.acquire(); // Wait if the buffer is full
        mutex.acquire(); // Acquire the mutex to access the buffer
        buffer.add(item);
        System.out.println("Produced: " + item);
        mutex.release(); // Release the mutex
        full.release(); // Notify that a slot in the buffer is now filled
    }

    public void consume() throws InterruptedException {
        full.acquire(); // Wait if the buffer is empty
        mutex.acquire(); // Acquire the mutex to access the buffer
        int item = buffer.poll();
        System.out.println("Consumed: " + item);
        mutex.release(); // Release the mutex
        empty.release(); // Notify that a slot in the buffer is now empty
    }
}

class Producer implements Runnable {
    private SharedResource sharedResource;

    public Producer(SharedResource sharedResource) {
        this.sharedResource = sharedResource;
    }

    @Override
    public void run() {
        try {
            for (int i = 0; i < 10; i++) {
                sharedResource.produce(i);
                Thread.sleep(1000); // Simulate some work being done before producing the next item
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}

class Consumer implements Runnable {
    private SharedResource sharedResource;

    public Consumer(SharedResource sharedResource) {
        this.sharedResource = sharedResource;
    }

    @Override
    public void run() {
        try {
            for (int i = 0; i < 10; i++) {
                sharedResource.consume();
                Thread.sleep(150); // Simulate some work being done before consuming the next item
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}

public class Main {
    public static void main(String[] args) {
        SharedResource sharedResource = new SharedResource();

        Thread producerThread = new Thread(new Producer(sharedResource));
        Thread consumerThread = new Thread(new Consumer(sharedResource));

        producerThread.start();
        consumerThread.start();

        try {
            producerThread.join();
            consumerThread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}